(defn level [depth idx]
  (Int.mod (+ depth idx) 20183))

(defn levels [depth tx ty w h]
  (let [cave (Map.create-with-len (* w h))]
    (do
      (set! cave (Map.put cave &(Pair.init 0 0) &(level depth 0)))
      (set! cave (Map.put cave &(Pair.init tx ty) &(level depth 0)))
      (for [x 0 (inc w)]
        (set! cave (Map.put cave &(Pair.init x 0) &(level depth (* x 16807)))))
      (for [y 0 (inc h)]
        (set! cave (Map.put cave &(Pair.init 0 y) &(level depth (* y 48271)))))
      (for [x 1 (inc w)]
        (for [y 1 (inc h)]
          (when (not (and (= x tx) (= y ty)))
            (let [val (level depth (* (Map.get &cave &(Pair.init (dec x) y))
                                      (Map.get &cave &(Pair.init x (dec y)))))]
              (set! cave (Map.put cave &(Pair.init x y) &val))))))
      cave)))

(defn level-to-type [depth level]
  (Int.mod level 3))

(defn make-cave [depth tx ty w h]
  (Map.endo-map (fn [_k idx] (level-to-type depth @idx))
                (levels depth tx ty w h)))

(defn print-type [t]
  (case t
    0 \.
    1 \=
    2 \|
    \x))

(defn print-cave [w h cave]
  (for [y 0 (inc h)]
    (do
      (for [x 0 (inc w)]
        (print* (print-type (Map.get cave &(Pair.init x y)))))
      (println* ""))))

(defn part1 []
  (println* (Array.sum &(Map.vals &(make-cave 3879 8 713 8 713)))))

;;; part2

;; tools are
;; 0 - neither
;; 1 - torch
;; 2 - climbing gear

(defn allowed? [tool terrain]
  (not (= tool terrain)))

(defn switch-tool [tool terrain]
  (let [new-tool (Int.mod (Int.inc tool) 3)]
    (if (allowed? new-tool terrain)
      new-tool
      (Int.mod (Int.inc new-tool) 3))))

(deftype Search [time Int
                 pos (Pair Int Int)
                 terrain Int
                 tool Int])

(defn <time [s-a s-b]
  (< @(Search.time s-a)
     @(Search.time s-b)))

(defn move-to [search new-terrain new-pos]
  (let [time @(Search.time search)
        tool @(Search.tool search)]
    (Search.init (+ 1 time) @new-pos new-terrain tool)))

(defn valid-move? [cave search pos]
  (and (and (>= @(Pair.a pos) 0)
            (>= @(Pair.b pos) 0))
       (and (Map.contains? cave pos)
            (allowed? @(Search.tool search)
                      (Map.get cave pos)))))

(defn switch-search-tool [search]
  (let [time @(Search.time search)
        tool @(Search.tool search)
        terrain @(Search.terrain search)
        pos @(Search.pos search)]
    (Search.init (+ 7 time) pos terrain (switch-tool tool terrain))))

(defn neighbours [cave search]
  (let [tool (Search.tool search)
        pos (Search.pos search)
        x @(Pair.a pos)
        y @(Pair.b pos)
        moves (Array.copy-map &(fn [p] (move-to search (Map.get cave p) p))
                              &(Array.endo-filter &(fn [p] (valid-move? cave search p))
                                                  [(Pair.init (dec x) y)
                                                   (Pair.init (inc x) y)
                                                   (Pair.init x (dec y))
                                                   (Pair.init x (inc y))]))]
    (Array.push-back moves (switch-search-tool search))))

(deftype State [pos (Pair Int Int)
                tool Int])

(defn hash [state]
  (+ (hash (State.pos state))
     (* 23 @(State.tool state))))

(defn = [state-a state-b]
  (and (= (State.pos state-a) (State.pos state-b))
       (= (State.tool state-a) (State.tool state-b))))

(defn bfs [cave target]
  (let [init (Search.init 0 (Pair.init 0 0) (Map.get cave &(Pair.init 0 0)) 1)
        queue [init]
        times (Map.create-with-len (Map.length cave))]
    (do
      (while true
        (let [cur (Heap.pop! &queue &<time)
              cur-pos (Search.pos &cur)
              cur-time (Search.time &cur)
              cur-tool (Search.tool &cur)
              cur-state &(State.init @cur-pos @cur-tool)
              int-max Int.MAX
              prev (Map.get-with-default &times cur-state &int-max)]
          (when (< @cur-time prev)
            (do
              ;;(print* "CUR: ")
              ;;(println* &cur)
              (set! times (Map.put times cur-state cur-time))
              (when (= cur-state target)
                (break))
              (let [new (neighbours cave &cur)]
                (foreach [n &new]
                  (Heap.push! &queue @n <time)))))))
      ;;(println* &queue)
      (Map.get &times target))))

(defn part2 []
  (println* (bfs &(make-cave 3879 8 713 720 720)
                 &(State.init (Pair.init 8 713) 1))))

(defn example-part2 []
  (let [example-cave (make-cave 510 10 10 20 20)]
    (println* (bfs &example-cave
                   &(State.init (Pair.init 10 10) 1)))))

;;; main

(defn main []
  (do
    ;;(part1)
    (example-part2)
    (part2)
    ))
