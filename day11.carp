(defn value [x y serial]
  (let [rack-id (+ 10 x)
        value (* (+ (* rack-id y) serial) rack-id)
        hund (/ (Int.mod value 1000) 100)]
    (- hund 5)))

(defn test-value []
  (do
    (println* (value 122 79 57)) ;; -5
    (println* (value 217 196 39)) ;; 0
    (println* (value 101 153 71)))) ;; 4

(defn value-grid [x0 y0 serial]
  (let [sum 0]
    (do
      (for [x x0 (+ x0 3)]
        (for [y y0 (+ y0 3)]
          (set! sum (+ sum (value x y serial)))))
      sum)))

(def serial 6548)

(defn part1 []
  (let [best -10
        best-x 0
        best-y 0]
    (do
      (for [x 1 298]
        (for [y 1 298]
          (let [v (value-grid x y serial)]
            (when (> v best)
              (do
                (set! best v)
                (set! best-x x)
                (set! best-y y))))))
      (print* best-x) (print* ",") (println* best-y))))

;; TODO move to core
(defn hash [pair]
  (+ (* 300 (hash (Pair.a pair)))
     (hash (Pair.a pair))))

;;
;; oooy
;; oooy
;; oooy
;; xxxx

(defn size-1 [serial]
  (let [ret (Map.create-with-len 100000)]
    (do
      (for [x 1 300]
        (for [y 1 300]
          (set! ret (Map.put ret &(Pair.init x y) &(value x y serial)))))
      ret)))

(defn increase [prev-sums new-size serial]
  (let [ret (Map.create-with-len 100000)]
    (do
      (for [x 1 (- 301 new-size)]
        (for [y 1 (- 301 new-size)]
          (let [base (Map.get prev-sums &(Pair.init x y))]
            (do
              (for [y2 y (+ y new-size)]
                (set! base (+ base (value x y2 serial))))
              (for [x2 x (inc (+ x new-size))]
                (set! base (+ base (value x2 y serial))))
              (set! ret (Map.put ret &(Pair.init x y) &base))))))
      ret)))

(defn part2 [serial]
  (let [values (size-1 serial)
        size 1
        best -100
        best-x 0
        best-y 0
        best-size 0]
    (do
      (while (<= size 17) ;;300)
        (do
          (println* "LOOP")
          (foreach [pair &(Map.to-array &values)]
             (let [val @(Pair.b pair)
                   x @(Pair.a (Pair.a pair))
                   y @(Pair.b (Pair.a pair))]
               (when (> val best)
                 (do
                   (set! best val)
                   (set! best-x x)
                   (set! best-y y)
                   (set! best-size size)))))
          (print* size) (print* ":") (println* best)
          (set! size (inc size))
          (set! values (increase &values size serial))))
      (print* best-x)
      (print* ",")
      (print* best-y)
      (print* ",")
      (println* best-size))))


(defn main []
  (do
    (test-value)
    (part1)
    ;; part 2
    (part2 18)
    (part2 42)
    (part2 serial)))
