(def in (IO.read-file "../input.12.txt"))
(def in-lines (Array.pop-back (String.lines &in)))

(defn b2i [b]
  (if b 1 0))

(defn env-to-number [l2 l1 x r1 r2]
  (+ (b2i r2)
     (* 2 (+ (b2i r1)
             (* 2 (+ (b2i x)
                     (* 2 (+ (b2i l1)
                             (* 2 (b2i l2))))))))))

(defn c2b [c]
  (= c \#))

(defn parse-rule [line]
  (Pair.init (env-to-number (c2b (String.char-at line 0))
                            (c2b (String.char-at line 1))
                            (c2b (String.char-at line 2))
                            (c2b (String.char-at line 3))
                            (c2b (String.char-at line 4)))
             (c2b (String.char-at line 9))))

(defn parse-rules [lines]
  (let [out (Array.replicate 32 &false)]
    (do
      (foreach [l lines]
        (when (= (String.length l) 10)
          (let [pair (parse-rule l)]
            (do
              ;;(println* l)
              ;;(println* &pair)
              (set! out (Array.aset out @(Pair.a &pair) @(Pair.b &pair)))))))
      out)))

(def rules (parse-rules &in-lines))

(defn parse-init [line]
  (let [slice (String.substring line
                                (String.length "initial state: ")
                                (String.length line))
        set (the (Set Int) (Set.create))]
    (do
      (for [i 0 (String.length &slice)]
        (when (c2b (String.char-at &slice i))
          (set! set (Set.put set &i))))
      set)))

(def init (parse-init &(Array.first &in-lines)))

(defn evaluate [live i]
  @(Array.nth &rules
              (env-to-number (Set.contains? live &(- i 2))
                             (Set.contains? live &(- i 1))
                             (Set.contains? live &i)
                             (Set.contains? live &(+ i 1))
                             (Set.contains? live &(+ i 2)))))

(sig evolve (Fn [(Ref (Set Int))] (Set Int)))
(defn evolve [live]
  (let [min-i (Set.reduce (fn [s i] (Int.min s @i)) Int.MAX live)
        max-i (Set.reduce (fn [s i] (Int.max s @i)) Int.MIN live)
        next (Set.create)]
    (do
      (for [i (- min-i 2) (+ max-i 3)]
        (when (evaluate live i)
          (set! next (Set.put next &i))))
      next)))

(defn set-sum [set]
  (Set.reduce (fn [s i] (+ s @i)) 0 set))

(defn part1 []
  (let [state @&init]
    (do
      (for [step 0 20]
        (set! state (evolve &state)))
      (println* (set-sum &state)))))

;; TODO move to core
(defn subset? [set-a set-b]
  (Set.reduce (fn [boo a] (and boo (Set.contains? set-b a)))
              true
              set-a))

;; TODO move to core
(defn = [set-a set-b]
  (and (= (Set.length set-a) (Set.length set-b))
       (and (subset? set-a set-b)
            ;; TODO this is not necessary since we test length
            (subset? set-b set-a))))

;; Not used
(defn find-cycle [init]
  (let [t-hare 0
        t-tortoise 0
        hare @init
        tortoise @init
        go-tortoise false]
    (do
      (for [_ 0 150]
        (do
          (when go-tortoise
            (do
              (set! tortoise (evolve &tortoise))
              (set! t-tortoise (Int.inc t-tortoise))))
          (set! go-tortoise (Bool.not go-tortoise))
          (set! hare (evolve &hare))
          (set! t-hare (Int.inc t-hare))
          ;;(println* (Set.length &hare))
          ;;(println* &hare)
          (when (= &tortoise &hare)
            (break))))
      (println* t-tortoise)
      (println* t-hare))))

(defn drift? [state-a state-b]
  (and (= (Set.length state-a) (Set.length state-b))
       (Set.reduce (fn [boo a] (and boo (Set.contains? state-b &(Int.inc @a))))
                   true
                   state-a)))

(defn test-drift? []
  (do
    (println* (drift? &(Set.from-array &[1 5 7]) &(Set.from-array &[2 6 8])))
    (println* (drift? &(Set.from-array &[1 5 7]) &(Set.from-array &[2 6 9])))))

(defn find-drift [init]
  (let [state @init
        t 0]
    (do
      (while true
        (let [new-state (evolve &state)]
          (do
            (when (drift? &state &new-state)
              (break))
            (set! t (inc t))
            (set! state new-state))))
      (Pair.init t state))))

(defn part2 []
  (let [drift &(find-drift &init)
        drift-t (Long.from-int @(Pair.a drift))
        drift-state (Pair.b drift)
        drift-sum (Long.from-int (set-sum drift-state))
        drift-size (Long.from-int (Set.length drift-state))
        target 50000000000l]
    (do
      ;;(println* drift)
      (println* (+ drift-sum
                   (* (- target drift-t)
                      drift-size))))))


(defn main []
  (do
    (println* &rules)
    (println* &(Set.to-array &init))
    (part1)
    ;;(test-drift?)
    (part2)
    ))
