(deftype Game [fwd (Array Int)
               bck (Array Int)])

(defn new-game [siz]
  (Game.init (Array.aset (Array.allocate siz) 0 0)
             (Array.aset (Array.allocate siz) 0 0)))

(sig insert-after (Fn [Game Int Int] Game))
(defn insert-after [g i new]
  (let [next @(Array.nth (Game.fwd &g) i)]
    (do
      (Array.aset! (Game.fwd &g) i new)
      (Array.aset! (Game.fwd &g) new next)
      (Array.aset! (Game.bck &g) next new)
      (Array.aset! (Game.bck &g) new i)
      g)))

(sig delete-after (Fn [Game Int] Game))
(defn delete-after [g i]
  (let [next @(Array.nth (Game.fwd &g) i)
        nnext @(Array.nth (Game.fwd &g) next)]
    (do
      (Array.aset! (Game.fwd &g) i nnext)
      (Array.aset! (Game.bck &g) nnext i)
      g)))

(defn move [g cur steps]
  (do
    (for [step 0 steps]
      (set! cur @(Array.nth (Game.fwd g) cur)))
    cur))

(defn move-back [g cur steps]
  (do
    (for [step 0 steps]
      (set! cur @(Array.nth (Game.bck g) cur)))
    cur))

(defn print-game [g]
  (do
    (print* 0)
    (print* " ")
    (let [cur (move g 0 1)]
      (while (not (= cur 0))
        (do
          (print* cur)
          (print* " ")
          (set! cur (move g cur 1)))))
    (println* "")))

(defn game [players last-marble]
  (let [g (new-game (inc last-marble))
        cur 0
        player 0
        scores (Array.replicate players &(Long.from-int 0))]
    (do
      (print* "SIZE ")
      (println* (inc (the Int last-marble)))
      (for [marble 1 (inc last-marble)]
        (do
          (if (= 0 (mod marble 23))
            (let [back (move-back &g cur 8)
                  to-delete (move &g back 1)
                  to-score (+ (Long.from-int to-delete)
                              (Long.from-int marble))]
              (do
                (Array.aset! &scores player (+ to-score @(Array.nth &scores player)))
                (set! g (delete-after g back))
                (set! cur back)))
            (do
              (set! cur (move &g cur 1))
              (set! g (insert-after g cur marble))))
          (set! cur (move &g cur 1))
          ;;(print* player)
          ;;(print* ": ")
          ;;(print-game &g)
          (set! player (Int.mod (inc player) players))))
      ;; longs are truncated to ints due to #351, but the answer fits in an unsigned int
      (IO.println &(Long.format "%u" (Array.maximum &scores))))))

(defn main []
  (do
    (println* "TESTS")
    (game 10 1618)
    (game 13 7999)
    (game 17 1104)
    (game 21 6111)
    (game 30 5807)
    (println* "PART1")
    (game 411 72059)
    (println* "PART2")
    (game 411 7205900)
    ))


;; (load "../day9.carp")(build)
