(def in (IO.read-file "../input.7.txt"))
(def lines (the (Array String) (Array.pop-back (String.lines &in))))

(defn parse [s]
  (let [parts (String.words s)]
    (Pair.init-from-refs
     (Array.nth &parts 1)
     (Array.nth &parts 7))))

(def pairs (Array.copy-map &parse &lines))

(defn add-child [g p c]
  (let [old (if (Map.contains? &g p)
              (Map.get &g p)
              [])]
    (Map.put g p &(Array.push-back old @c))))

(defn add-pair [g p]
  (add-child g (Pair.b p) (Pair.a p)))

(defn pairs-to-graph [pairs]
  (Array.reduce &add-pair
                {}
                pairs))

(def graph (pairs-to-graph &pairs))

(def example-graph (pairs-to-graph &[(Pair.init-from-refs "C" "A")
                                     (Pair.init-from-refs "C" "F")
                                     (Pair.init-from-refs "A" "B")
                                     (Pair.init-from-refs "A" "D")
                                     (Pair.init-from-refs "B" "E")
                                     (Pair.init-from-refs "D" "E")
                                     (Pair.init-from-refs "F" "E")]))

(defn remove-all [set vals]
  (Array.reduce &Set.remove set vals))

(defn keys [m]
  (Array.copy-map &(fn [p] @(Pair.a p)) &(Map.to-array m)))

(defn vals [m]
  (Array.copy-map &(fn [p] @(Pair.b p)) &(Map.to-array m)))

(defn root [graph]
  (let [pairs (Map.to-array graph)
        all (Set.from-array &(keys graph))
        roots (Set.to-array &(Array.reduce &remove-all all &(vals graph)))]
    (Array.first &roots)))

(defn all-nodes [graph]
  (Array.sort
   (Set.to-array
    &(Set.from-array &(Array.concat &[(keys graph)
                                      (Array.concat &(vals graph))])))))

(defn contains? [arr val]
  (< 0 (Array.element-count arr val)))

(defn part1 [graph]
  (let [out []
        left (all-nodes graph)]
    (do
      (while (not (Array.empty? &left))
        (let [out-ref &out]
          (do
            (foreach [target &left]
              (do
                (let [deps (Map.get graph target)]
                  (when (Array.all? &(fn [dep] (contains? out-ref dep)) &deps)
                    (do
                      (set! out (Array.push-back out @target))
                      ;; XXX mutating inside foreach is bad
                      (set! left (Array.filter &(fn [c] (not (= target c))) left))
                      (break)))))))))
      (println* &(String.concat &out)))))

(defn task-duration [s]
  (+ 61
     (- (Char.to-int (String.char-at s 0))
        (Char.to-int \A))))

(defn can-start [to-start graph ended]
  (let [out []]
    (do
      (foreach [target to-start]
        (let [deps (Map.get graph target)]
          (when (Array.all? &(fn [dep] (contains? ended dep)) &deps)
            (set! out (Array.push-back out @target)))))
      out)))

(defn take-smallest [n arr]
  (let [s (Array.sorted arr)
        out []]
    (do
      (for [i 0 (Int.min n (Array.length &s))]
        (set! out (Array.push-back out @(Array.nth &s i))))
      out)))

(defn compare-a [p1 p2]
  (> (Pair.a p2)
     (Pair.a p1)))

(defn part2 [workers graph]
  (let [in-progress []
        time 0
        to-start (all-nodes graph)
        ended []]
    (do
      (while true
        (let [limit (- workers (Array.length &in-progress))
              next &(take-smallest limit &(can-start &to-start graph &ended))]
          (do
            (println* time)
            (print* "STARTING ")
            (println* next)
            (print* "ENDED ")
            (println* &ended)
            (print* "TO-START ")
            (println* &to-start)
            (set! to-start (Array.filter &(fn [c] (not (contains? next c))) to-start))
            (foreach [n next]
              (Array.push-back! &in-progress
                                (Pair.init (+ time (task-duration n))
                                           @n)))
            (when (Array.empty? &in-progress)
              (break))
            (set! in-progress (Array.sort-by in-progress &compare-a))
            (print* "IN PROGRESS ")
            (println* &in-progress)
            (let [finished (Array.pop-back! &in-progress)]
              (do
                (print* "FINISH ")
                (println* &finished)
                (Array.push-back! &ended @(Pair.b &finished))
                (set! time @(Pair.a &finished)))))))
      (println* "DONE")
      (println* time))))



(defn main []
  (do
    (part1 &example-graph)
    (part1 &graph)
    (part2 2 &example-graph)
    (part2 5 &graph)))

;; (load "../day7.carp")(build)
