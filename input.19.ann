#ip 2
00 addi 2 16 2 -- jmp +16 => [X]
01 seti 1 0 4 -- [Y] r4=1
02 seti 1 0 1 -- [Z] r1=1                   \
03 mulr 4 1 3 -- [W] r3=r4*r1               | do {                         \
04 eqrr 3 5 3 -- r3=(r5==r3)                |    r1=1                      |
05 addr 3 2 2 -- jmp +r3 i.e. EQ or NEQ     |    do {                      |
06 addi 2 1 2 -- [NEQ] jmp +1 => [CNT]      |      if (r5==r4*r1)          |
07 addr 4 0 0 -- [EQ] r0+=r4                |        {r0+=r4}              | r0 += sum of divisors of r5
08 addi 1 1 1 -- [CNT] r1++                 |      r1++                    |
09 gtrr 1 5 3 -- r3=(r1>r5)                 |                              |
10 addr 2 3 2 -- jmp +r3 i.e. GT or LE      |                              |
11 seti 2 5 2 -- [LE] jmp 2 => W            |    } while (r1<=r5)          |
12 addi 4 1 4 -- [GT] r4++                  |    r4++                      |
13 gtrr 4 5 3 -- r3=(r4>r5)                 | } while (r4<=r5)             /
14 addr 3 2 2 -- jmp +3 i.e LE2 or GT2      |
15 seti 1 9 2 -- [LE2] jmp 1 => Z           /
16 mulr 2 2 2 -- [GT2] jmp (ip^2) => HALT
17 addi 5 2 5 -- [X] r5+=2                  \
18 mulr 5 5 5 -- r5 = r5^2                  |
19 mulr 2 5 5 -- r5 = ip*r5 i.e. 19*r5      | r3 = 22(r3+8)+5
20 muli 5 11 5 -- r5 = 11*r5                | r5 = 11*19*(r5+2)^2 + r3
21 addi 3 8 3 -- r3 += 8                    |    = 1017 initially
22 mulr 3 2 3 -- r3 *= ip, i.e. r3 *= 22    |
23 addi 3 5 3 -- r3 += 5                    |
24 addr 5 3 5 -- r5 += r3                   /
25 addr 2 0 2 -- jmp +r0 i.e. initally A or B
26 seti 0 9 2 -- [A] jmp [Y]
27 setr 2 8 3 -- [B] r3=r2=27    \
28 mulr 3 2 3 -- r3*=r2=28       | r3=((27*28)+29)*30*14*32=10550400
29 addr 2 3 3 -- r3+=r2=29       | r5+=r3
30 mulr 2 3 3 -- r3*=32=30       |
31 muli 3 14 3 -- r3*=14         | i.e. r5=10551417
32 mulr 3 2 3 -- r3*=r2=32       |
33 addr 5 3 5 -- r5+=r3          /
34 seti 0 6 0 -- r0=0
35 seti 0 0 2 -- jmp 0 => [Y]
