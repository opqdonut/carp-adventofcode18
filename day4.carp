(def in (IO.read-file "../input.4.sorted"))
(def in-lines (Array.pop-back (String.lines &in)))

(deftype Entry [date String
                guard Int
                h Int
                m Int
                sleep Bool])

(defn parse-int [str-ref]
  (let [clean (Pattern.substitute #"[^0-9]" str-ref "" -1)]
    (Int.from-string &clean)))

(defn parse [s]
  (let [parts &(String.split-by s &[\: \ ])
        ;;_ (println* parts)
        guard? (= "Guard" (Array.nth parts 3))
        sleep? (= "falls" (Array.nth parts 3))]
    (do
      (Entry.init (String.tail (Array.nth parts 0))
                  (if guard?
                    (parse-int (Array.nth parts 4))
                    -1)
                  (parse-int (Array.nth parts 1))
                  (parse-int (Array.nth parts 2))
                  sleep?))))

(def entries (Array.copy-map &parse &in-lines))

(deftype Sleep [guard Int
                duration Int
                start-m Int
                end-m Int])

(defn entries->sleeps [entries]
  (let [ret (Array.zero)
        cur -1
        start -1]
    (do
      (foreach [e entries]
        (if (< 0 @(Entry.guard e))
          (set! cur @(Entry.guard e))
          (if @(Entry.sleep e)
            (set! start @(Entry.m e))
            (let [end @(Entry.m e)]
              (Array.push-back! &ret (Sleep.init cur
                                                 (- end start)
                                                 start
                                                 end))))))
      ret)))

(def sleeps (entries->sleeps &entries))

(defn map-from-array-with [key-fn value-fn combine-fn values]
  (let [m (Map.create)]
    (do
      (foreach [v values]
        (let [key (key-fn v)
              val (value-fn v)
              val2 (if (Map.contains? &m key)
                     (combine-fn val &(Map.get &m key))
                     @val)]
          (set! m (Map.put m key &val2))))
      m)))

(defn summarize-sleeps [sleeps]
  (map-from-array-with Sleep.guard
                       Sleep.duration
                       (fn [x y] (add-ref x y))
                       sleeps))

(def summary (summarize-sleeps &sleeps))

(defn maximum-by [better? array-ref]
  (Array.reduce &(fn [old new-ref] (if (better? &old new-ref) @new-ref old))
                (Array.first array-ref)
                array-ref))

(defn compare-b [p1 p2]
  (> (Pair.b p2)
     (Pair.b p1)))

(defn best-sleeper [summary]
  @(Pair.a
    &(maximum-by compare-b
                 &(Map.to-array summary))))

(defn best-minute [guard sleeps]
  (let [ss (Array.filter &(fn [s] (= guard @(Sleep.guard s))) @sleeps)
        mins (Array.replicate 60 &0)]
    (do
      (foreach [s &ss]
        (for [m @(Sleep.start-m s) @(Sleep.end-m s)]
          (Array.aupdate! &mins m &(fn [i] (+ 1 @i)))))
      (maximum-by compare-b
                  &(Array.enumerated &mins)))))


(defn part1 []
  (do
    (let [best (best-sleeper &summary)
          minute @(Pair.a &(best-minute best &sleeps))]
      (do
        (println* best)
        (println* minute)
        (println* (* best minute))))))

(def all-guards
  (Set.to-array
   &(Set.from-array
     &(Array.copy-map &(fn [g] @(Sleep.guard g)) &sleeps))))

(defn part2 []
  (let [bests-by-guard (Array.copy-map
                        &(fn [g] (Pair.init @g (best-minute @g &sleeps)))
                        &all-guards)
        _ (println* &bests-by-guard)
        best (maximum-by (fn [b1 b2] (compare-b (Pair.b b1) (Pair.b b2)))
                         &bests-by-guard)
        _ (println* &best)
        result (* @(Pair.a &best) @(Pair.a (Pair.b &best)))]
    (println* result)))

(defn main []
  (do
    (part1)
    (println* ";;; PART 2 ;;;")
    (part2)))
